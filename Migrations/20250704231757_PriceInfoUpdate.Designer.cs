// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSocket_API.Data;

#nullable disable

namespace WebSocket_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250704231757_PriceInfoUpdate")]
    partial class PriceInfoUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebSocket_API.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int?>("LatestPriceId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("LatestPriceId")
                        .IsUnique()
                        .HasFilter("[LatestPriceId] IS NOT NULL");

                    b.HasIndex("ProviderId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("WebSocket_API.Entities.GicsClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndustryGroupId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("SubIndustryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GicsClassifications");
                });

            modelBuilder.Entity("WebSocket_API.Entities.GicsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GicsId")
                        .HasColumnType("int");

                    b.Property<int?>("GicsParentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("GicsItems");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstrumentProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("KindId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("tickSize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("InstrumentProfileId");

                    b.HasIndex("KindId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("WebSocket_API.Entities.InstrumentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefaultOrderSize")
                        .HasColumnType("int");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TradingHoursId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("ProviderId");

                    b.ToTable("InstrumentMappings");
                });

            modelBuilder.Entity("WebSocket_API.Entities.InstrumentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GicsClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GicsClassificationId");

                    b.ToTable("InstrumentProfiles");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("WebSocket_API.Entities.PriceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangePct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("PriceInfos");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("WebSocket_API.Entities.ProviderExchange", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.HasKey("ProviderId", "ExchangeId");

                    b.HasIndex("ExchangeId");

                    b.ToTable("ProviderExchanges");
                });

            modelBuilder.Entity("WebSocket_API.Entities.TradingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ElectronicEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElectronicStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstrumentMappingId")
                        .HasColumnType("int");

                    b.Property<string>("RegularEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegularStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentMappingId")
                        .IsUnique()
                        .HasFilter("[InstrumentMappingId] IS NOT NULL");

                    b.ToTable("TradingHours");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Asset", b =>
                {
                    b.HasOne("WebSocket_API.Entities.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket_API.Entities.PriceInfo", "LatestPrice")
                        .WithOne()
                        .HasForeignKey("WebSocket_API.Entities.Asset", "LatestPriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebSocket_API.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("LatestPrice");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("WebSocket_API.Entities.GicsItem", b =>
                {
                    b.HasOne("WebSocket_API.Entities.GicsItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Instrument", b =>
                {
                    b.HasOne("WebSocket_API.Entities.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebSocket_API.Entities.InstrumentProfile", "InstrumentProfile")
                        .WithMany()
                        .HasForeignKey("InstrumentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket_API.Entities.Kind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Exchange");

                    b.Navigation("InstrumentProfile");

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("WebSocket_API.Entities.InstrumentMapping", b =>
                {
                    b.HasOne("WebSocket_API.Entities.Exchange", "Exchange")
                        .WithMany("InstrumentMappings")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebSocket_API.Entities.Instrument", "Instrument")
                        .WithMany("InstrumentMappings")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket_API.Entities.Provider", "Provider")
                        .WithMany("InstrumentMappings")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Exchange");

                    b.Navigation("Instrument");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("WebSocket_API.Entities.InstrumentProfile", b =>
                {
                    b.HasOne("WebSocket_API.Entities.GicsClassification", "GicsClassification")
                        .WithMany()
                        .HasForeignKey("GicsClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GicsClassification");
                });

            modelBuilder.Entity("WebSocket_API.Entities.PriceInfo", b =>
                {
                    b.HasOne("WebSocket_API.Entities.Asset", "Asset")
                        .WithMany("PriceHistory")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("WebSocket_API.Entities.ProviderExchange", b =>
                {
                    b.HasOne("WebSocket_API.Entities.Exchange", "Exchange")
                        .WithMany("ProviderExchanges")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket_API.Entities.Provider", "Provider")
                        .WithMany("ProviderExchanges")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("WebSocket_API.Entities.TradingHours", b =>
                {
                    b.HasOne("WebSocket_API.Entities.InstrumentMapping", "InstrumentMapping")
                        .WithOne("TradingHours")
                        .HasForeignKey("WebSocket_API.Entities.TradingHours", "InstrumentMappingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InstrumentMapping");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Asset", b =>
                {
                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Exchange", b =>
                {
                    b.Navigation("InstrumentMappings");

                    b.Navigation("ProviderExchanges");
                });

            modelBuilder.Entity("WebSocket_API.Entities.GicsItem", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Instrument", b =>
                {
                    b.Navigation("InstrumentMappings");
                });

            modelBuilder.Entity("WebSocket_API.Entities.InstrumentMapping", b =>
                {
                    b.Navigation("TradingHours");
                });

            modelBuilder.Entity("WebSocket_API.Entities.Provider", b =>
                {
                    b.Navigation("InstrumentMappings");

                    b.Navigation("ProviderExchanges");
                });
#pragma warning restore 612, 618
        }
    }
}
